import sys
from _typeshed import SupportsKeysAndGetItem
from collections.abc import Mapping
# noinspection PyProtectedMember
from _collections_abc import dict_keys, dict_items, dict_values  # This is a stub, idc.
from typing import TypeVar, Generic, Iterable, Self, Any, overload, Iterator

_T = TypeVar("_T")
_S = TypeVar("_S")
_T1 = TypeVar("_T1")
_T2 = TypeVar("_T2")
_KT = TypeVar('_KT', covariant=True)
_VT = TypeVar('_VT', covariant=True)


# noinspection PyMethodOverriding
class FrozenDict(Mapping[_KT, _VT], Generic[_KT, _VT]):
    _dict: dict[_KT, _VT]

    # Copied from typeshed, available under the Apache license 2.0.
    #  Modified to remove comments and to remove method not applicable to a
    #  frozen dictionary.
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self: FrozenDict[str, _VT], **kwargs: _VT) -> None: ...
    @overload
    def __init__(self, __map: SupportsKeysAndGetItem[_KT, _VT]) -> None: ...
    @overload
    def __init__(self: FrozenDict[str, _VT],
                 __map: SupportsKeysAndGetItem[str, _VT],
                 **kwargs: _VT) -> None: ...
    @overload
    def __init__(self, __iterable: Iterable[tuple[_KT, _VT]]) -> None: ...
    @overload
    def __init__(self: FrozenDict[str, _VT],
                 __iterable: Iterable[tuple[str, _VT]],
                 **kwargs: _VT) -> None: ...
    @overload
    def __init__(self: FrozenDict[str, str], __iterable: Iterable[list[str]]) -> None: ...
    @overload
    def __init__(self: FrozenDict[bytes, bytes],
                 __iterable: Iterable[list[bytes]]) -> None: ...
    def __new__(cls, *args: Any, **kwargs: Any) -> Self: ...
    def copy(self) -> FrozenDict[_KT, _VT]: ...
    def keys(self) -> dict_keys[_KT, _VT]: ...
    def values(self) -> dict_values[_KT, _VT]: ...
    def items(self) -> dict_items[_KT, _VT]: ...
    @classmethod
    @overload
    def fromkeys(cls, __iterable: Iterable[_T],
                 __value: None = None) -> FrozenDict[_T, Any | None]: ...
    @classmethod
    @overload
    def fromkeys(cls, __iterable: Iterable[_T], __value: _S) -> FrozenDict[_T, _S]: ...
    @overload  # type: ignore[override]
    def get(self, __key: _KT) -> _VT | None: ...
    @overload
    def get(self, __key: _KT, __default: _VT) -> _VT: ...
    @overload
    def get(self, __key: _KT, __default: _T) -> _VT | _T: ...
    def __len__(self) -> int: ...
    def __getitem__(self, __key: _KT) -> _VT: ...
    def __iter__(self) -> Iterator[_KT]: ...
    def __eq__(self, __value: object) -> bool: ...
    if sys.version_info >= (3, 8):
        def __reversed__(self) -> Iterator[_KT]: ...
    def __hash__(self) -> int: ...
    if sys.version_info >= (3, 9):
        @overload
        def __or__(self, __value: Mapping[_KT, _VT]) -> FrozenDict[_KT, _VT]: ...
        @overload
        def __or__(self, __value: Mapping[_T1, _T2]) -> FrozenDict[_KT | _T1, _VT | _T2]: ...
        @overload
        def __ror__(self, __value: Mapping[_KT, _VT]) -> FrozenDict[_KT, _VT]: ...
        @overload
        def __ror__(self, __value: Mapping[_T1, _T2]
                    ) -> FrozenDict[_KT | _T1, _VT | _T2]: ...
